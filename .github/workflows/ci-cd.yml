name: 🚀 CI/CD Pipeline - Todo App

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: 📦 Install dependencies
        run: |
          cd backend
          npm ci

      - name: 🧪 Run unit tests
        run: |
          cd backend
          npm test

      - name: 📊 Generate coverage report
        run: |
          cd backend
          npm run test:coverage

      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  build-and-push:
    name: 🐳 Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata for Backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏷️ Extract metadata for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}

      - name: 🔨 Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}

    validate-images:
    name: ✅ Validate Docker Images
    runs-on: ubuntu-latest
    needs: [test, build-and-push]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: ✅ Validate Backend Image
      run: |
        echo "🔍 Validating backend image..."
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
        docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
        echo "✅ Backend image validated successfully"
        
    - name: ✅ Validate Frontend Image
      run: |
        echo "🔍 Validating frontend image..."
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
        docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
        echo "✅ Frontend image validated successfully"
        
    - name: 🎯 Images Ready for Deployment
      run: |
        echo "🎉 Docker images built and validated successfully!"
        echo "📦 Backend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest"
        echo "📦 Frontend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest"
        echo "🚀 Ready for deployment in next phase"

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

    notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [test, build-and-push, validate-images, security-scan]
    if: always()
    
    steps:
    - name: 📊 Pipeline Summary
      run: |
        echo "🚀 CI/CD Pipeline Results:"
        echo "✅ Tests: ${{ needs.test.result }}"
        echo "🐳 Build & Push: ${{ needs.build-and-push.result }}"
        echo "✅ Validate Images: ${{ needs.validate-images.result }}"
        echo "🔒 Security Scan: ${{ needs.security-scan.result }}"
        
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.build-and-push.result }}" == "success" ]]; then
          echo "🎉 CI/CD Pipeline ejecutado exitosamente!"
          echo "🚀 Images ready for deployment phase"
        else
          echo "❌ Pipeline falló en algún paso"
        fi
